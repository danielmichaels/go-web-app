version: '3'

dotenv:
  - .env


vars:
  DATABASE_URL:  "./database/data.db"
  DATABASE_TYPE: "postgres"
  SERVER_PORT: 9000

tasks:
  default:
    desc: display all available tasks
    cmds:
      - task --list-all
    silent: true

  serve:
    desc: Run webserver
    cmds:
      - air -c .air.toml -build.bin="./tmp/{{ cookiecutter.cmd_name.strip() }} serve"{%raw%}{{.CLI_ARGS}}{%endraw%}

  workers:
    desc: Run workers.go
    cmds:
      - air -c .air.toml -build.bin="./tmp/{{ cookiecutter.cmd_name.strip() }} workers"{%raw%}{{.CLI_ARGS}}{%endraw%}

  tidy:
    desc: go mod tidy
    cmds:
      - go mod tidy

  init:
    desc: run this when generated from cookiecutter
    cmds:
      - task: sqlc
      - task: templgen
      - task: assets
      - task: tidy

  pnpm:
    desc: Install javascript dependencies
    cmds:
      - pnpm install

  tailwind:
    desc: Install tailwind dependencies
    cmds:
      - pnpm run tailwind

  audit:
    desc: Run linters and betteralign
    cmds:
      - betteralign -apply ./...
      - golines -w .
      - golangci-lint run ./... {%raw%}{{.CLI_ARGS}}{%endraw%}

  alpine:
    desc: Install Alpine.js dependencies
    cmds:
      - pnpm run alpine

  assets:
    desc: Run all javascript related tasks in one go
    cmds:
      - task: pnpm
      - task: tailwind
      - task: alpine

  watchassets:
    desc: Watch assets and re-build on change
    cmds:
      - fd . assets | entr task assets

  golines:
    desc: run golines . -w
    cmds:
      - golines . -w --ignore-generated --no-reformat-tags

  templgen:
    desc: run 'templ generate'
    cmds:
      - templ fmt .
      - templ generate

  templautogen:
    desc: run 'templ generate' when a .templ file changes
    cmds:
      - fd . 'assets/view' | entr task templgen

  sqlc:
    desc: Generate models using sqlc
    env:
      CGO_ENABLED: 1
    dir: sql
    cmds:
      - env | ag -i cgo
      - sqlc generate

  db:migration:up:
    desc: Run migrations (all of them)
    cmds:
      - goose -dir ./assets/migrations {%raw%}{{.DATABASE_TYPE}} {{.DATABASE_URL}}{%endraw%} up

  db:migration:down:
    desc: Drop all migrations
    cmds:
      - goose -dir ./assets/migrations {%raw%}{{.DATABASE_TYPE}} {{.DATABASE_URL}}{%endraw%} down

  db:migration:down:to:
    desc: Run migrations back to a specific version
    summary: |
      Rollback to a specific version of the local migrations. Must provide the version
      as an argument.
      Example,
      task db:migration:down:to -- 0001
    cmds:
      - goose -dir ./assets/migrations {%raw%}{{.DATABASE_TYPE}} {{.DATABASE_URL}} down-to {{.CLI_ARGS}}{%endraw%}
  db:migration:create:
    desc: Create a new migration. The migration name is the value after --
    summary: |
      Create a new migrations file using the following syntax
      task db:migration:create -- my-new-migration
    cmds:
      - goose -dir ./assets/migrations {%raw%}{{.DATABASE_TYPE}} {{.DATABASE_URL}} create {{.CLI_ARGS}} sql{%endraw%}
      - goose -dir ./assets/migrations {%raw%}{{.DATABASE_TYPE}} {{.DATABASE_URL}} fix{%endraw%}

  db:migration:redo:
    desc: Rollback the latest migration, the reapply
    cmds:
      - goose -dir ./assets/migrations {%raw%}{{.DATABASE_TYPE}} {{.DATABASE_URL}} redo{%endraw%}

  db:migration:status:
    desc: Get the migration status of the local sqlite database
    summary: |
      Example usage
      task db:migration:status
    cmds:
      - goose -dir ./assets/migrations {%raw%}{{.DATABASE_TYPE}} {{.DATABASE_URL}} status{%endraw%}

  # todo: only use if sqlite3 db
  db:shell:
    desc: Drop into the `sqlite` shell
    cmds:
      - sqlite3 {%raw%}{{.DATABASE_URL}}{%endraw%}

  mailpit:
    desc: Run the mailpit debug mail webserver
    cmds:
      - |
        docker run -d \
        --restart unless-stopped \
        --name=mailpit \
        -p 8025:8025 \
        -p 1025:1025 \
        axllent/mailpit
